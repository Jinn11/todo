{"version":3,"sources":["TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskList","props","console","log","react_default","a","createElement","todoArray","length","map","todo","index","key","id","onClick","event","deleteT","type","Todo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","CurrentToDo","target","value","addItem","preventDefault","state","concat","toConsumableArray","result","filter","onSubmit","htmlFor","onChange","name","placeholder","src_TaskList","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAgBeA,EAdC,SAACC,GAEb,OADDC,QAAQC,IAAIF,GAEPG,EAAAC,EAAAC,cAAA,UACKL,EAAMM,UAAUC,OACjBP,EAAMM,UAAUE,IAAI,SAACC,EAAKC,GAC1B,OAAOP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,GAAQD,EAAKN,EAAAC,EAAAC,cAAA,UAAQO,GAAIF,EAAMG,QAAS,SAACC,GAAD,OAASd,EAAMe,QAAQL,EAAMI,IAAQE,KAAM,QAAtE,aAEjCb,EAAAC,EAAAC,cAAA,aCuCOY,cA7Cf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,aAAa,SAAAX,GAEZI,EAAKQ,SAAS,CACZC,YAAYb,EAAMc,OAAOC,SAXfX,EAcbY,QAAQ,SAAChB,GACPA,EAAMiB,iBAEuB,KAA5Bb,EAAKc,MAAML,aACZT,EAAKQ,SACJ,CAAEjB,KAAI,GAAAwB,OAAAd,OAAAe,EAAA,EAAAf,CAAMD,EAAKc,MAAMvB,MAAjB,CAAuBS,EAAKc,MAAML,cAAcA,YAAY,MAnBxDT,EAwBbH,QAAS,SAACL,EAAMI,GAChB,IAAMqB,EAASjB,EAAKc,MAAMvB,KAAK2B,OAAO,SAAC3B,EAAKC,GAAN,OAAgBA,GAASI,EAAMc,OAAOhB,KAC5EM,EAAKQ,SAAS,CACZjB,KAAK0B,KAzBLjB,EAAKc,MAAM,CACTvB,KAAK,GACLkB,YAAY,IAJHT,wEAiCT,OACEf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMgC,SAAWhB,KAAKS,SACtB3B,EAAAC,EAAAC,cAAA,SAAOiC,QAAQ,KAAf,cACAnC,EAAAC,EAAAC,cAAA,SAAOkC,SAAUlB,KAAKI,aAAce,KAAK,IAAIxB,KAAK,QAAQyB,YAAY,KACtEtC,EAAAC,EAAAC,cAAA,UAAQW,KAAM,UAAd,OAEFb,EAAAC,EAAAC,cAACqC,EAAD,CAAUpC,UAAYe,KAAKW,MAAMvB,KAAMM,QAASM,KAAKN,kBA1CtC4B,aCUCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b5bfbbb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TaskList =(props)=>{\r\n   console.log(props)\r\n    return(\r\n        <ul>\r\n            {props.todoArray.length ?\r\n            props.todoArray.map((todo,index)=>{\r\n            return(<li key={index}>{todo}<button id={index}onClick={(event)=>props.deleteT(index,event)} type =\"text\">Delete</button></li>)\r\n            }):\r\n        <li></li>\r\n        }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TaskList","import React, { Component } from 'react';\nimport TaskList from './TaskList'\nclass Todo extends Component{\n\nconstructor(){\n  super();\n  this.state={\n    todo:[],\n    CurrentToDo:\"\",\n  }\n}\n\nhandleChange=event=>{\n //console.log( event.target.value)\n this.setState({\n   CurrentToDo:event.target.value,\n })//we want to set the currentToDo on state to the event.target.value & placing curentTOdo\n}\naddItem=(event)=>{\n  event.preventDefault();\n  //we want to add the this.state.CurrentToDo value to the todos array;\nif(this.state.CurrentToDo !==  \"\"){\n  this.setState(\n   { todo: [...this.state.todo, this.state.CurrentToDo], CurrentToDo:\"\"}\n  )\n}\n}\n\ndeleteT =(index,event)=>{\nconst result = this.state.todo.filter((todo,index) => index != event.target.id)\nthis.setState({\n  todo:result\n});\n}\n\n  render(){\n  \n    return (\n      <div>\n      <form onSubmit ={this.addItem}>  \n      <label htmlFor=\"T\">TASK_NAME:</label>\n      <input onChange={this.handleChange} name=\"T\" type=\"teccc\" placeholder=\"\"/>\n      <button type =\"Submit\">OK</button>\n    </form>\n    <TaskList todoArray ={this.state.todo} deleteT={this.deleteT}/></div>\n    )\n  }\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}